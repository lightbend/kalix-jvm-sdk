// Copyright 2021 Lightbend Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package customer.view;

option java_outer_classname = "CustomerViewModel";

import "customer/domain/customer_domain.proto";
import "customer/api/customer_api.proto";
import "kalix/annotations.proto";
import "google/protobuf/any.proto";

// end::declarations[]
import "google/api/annotations.proto";

// tag::service-event-sourced[]
message ByNameRequest {
  string customer_name = 1;
}

message CustomerList {
  repeated api.Customer customers = 1;
}

service CustomerByName {
  option (kalix.codegen) = { // <1>
    view: {}
  };

  rpc ProcessCustomerCreated(domain.CustomerCreated) returns (api.Customer) { // <2>
    option (kalix.method).eventing.in = {
      event_sourced_entity: "customers" // <3>
    };
    option (kalix.method).view.update = {
      table: "customers"
    };
  }

  rpc ProcessCustomerNameChanged(domain.CustomerNameChanged) returns (api.Customer) { // <2>
    option (kalix.method).eventing.in = {
      event_sourced_entity: "customers" // <4>
    };
    option (kalix.method).view.update = {
      table: "customers"
    };
  }

  rpc IgnoreOtherEvents(google.protobuf.Any) returns (api.Customer) {
    option (kalix.method).eventing.in = {
      event_sourced_entity: "customers"
      ignore: true
     };
  };

  rpc GetCustomers(ByNameRequest) returns (CustomerList) {
    option (kalix.method).view.query = {
      query: "SELECT * AS customers FROM customers WHERE name = :customer_name"
    };
  }
}

