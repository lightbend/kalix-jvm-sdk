// Copyright 2021 Lightbend Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package customer.api;

option java_outer_classname = "CustomerEventsApi";

import "kalix/annotations.proto";
import "customer/domain/customer_domain.proto";

// public API/events for consumptions in subscribing server
message Created {
    string customer_id = 1;
    string customer_name = 2;
    string email = 3;
}

message NameChanged {
    string customer_name = 1;
}

// tag::publisher[]
service CustomerEventsService {
    option (kalix.codegen) = {
        action: {}
    };
    option (kalix.service).eventing.in = { // <1>
        event_sourced_entity: "customers"
        // skip/filter events that there is no transform method for (AddressChanged)
        ignore_unknown: true // <2>
    };
    option (kalix.service).acl.allow = { service: "*" }; // <4>

    // transform methods for turning internal event types to public API
    rpc TransformCustomerCreated(domain.CustomerCreated) returns (Created) { } // <5>
    rpc TransformCustomerNameChanged(domain.CustomerNameChanged) returns (NameChanged) {}

}
// end::publisher[]